import{_ as e,c as s,o as a,Q as n}from"./chunks/framework.18dad991.js";const g=JSON.parse('{"title":"Docs","description":"","frontmatter":{},"headers":[],"relativePath":"README.md","filePath":"README.md","lastUpdated":1698835366000}'),t={name:"README.md"},l=n(`<h1 id="docs" tabindex="-1">Docs <a class="header-anchor" href="#docs" aria-label="Permalink to &quot;Docs&quot;">​</a></h1><h2 id="✨-介绍" tabindex="-1">✨ 介绍 <a class="header-anchor" href="#✨-介绍" aria-label="Permalink to &quot;✨ 介绍&quot;">​</a></h2><p>Docs 是 FzDesign 官方文档目录，使用 <a href="https://github.com/vuejs/vitepress" target="_blank" rel="noreferrer">VitePress</a> 进行开发。</p><p><code>vitePress</code> 是一个 <code>Vite</code> 和 <code>Vue</code> 支持的静态站点生成器，使用 <a href="https://zh.wikipedia.org/zh-tw/Markdown" target="_blank" rel="noreferrer">MarkDown</a> 进行编写。如果你还不了解 <code>MarkDown</code>，可以通过<a href="http://younghz.github.io/Markdown/" target="_blank" rel="noreferrer">这里</a>进行学习。</p><p>如果你也想编写自己的 <code>blog</code>，可以在 <a href="https://github.com/vuejs/vitepress" target="_blank" rel="noreferrer">VitePress</a> 官方进行学习使用。</p><h2 id="🐳-线上地址" tabindex="-1">🐳 线上地址 <a class="header-anchor" href="#🐳-线上地址" aria-label="Permalink to &quot;🐳 线上地址&quot;">​</a></h2><ul><li>官方文档：<a href="https://fangzhioo.github.io/fz-design" target="_blank" rel="noreferrer">Fz Design</a></li></ul><h2 id="🚧-编写规范" tabindex="-1">🚧 编写规范 <a class="header-anchor" href="#🚧-编写规范" aria-label="Permalink to &quot;🚧 编写规范&quot;">​</a></h2><p>首先需要在 <a href="https://github.com/fangzhioo/fz-design/tree/master/docs/components" target="_blank" rel="noreferrer">docs/components</a> 目录下，新建一个以组件小写名，去掉前缀 <code>Fz</code> 的 <code>*.md</code> 文件。如：<code>button</code>，而不是 <code>FzButton</code>。</p><ul><li><code>*.md</code> 内，只允许出现一个一级标题 <code>#</code>，后面全部使用 二级标题 <code>##</code>和 三级标题 <code>###</code>，禁止出现三级标题以下的标题。</li><li>一级标题为<code>组件的名称 + 中文描述</code>，中间要带有空格。如：<code>Button 按钮</code>、<code>Icon 图标</code>。这里的组件名要以大写开头</li><li>接下来每个二级标题用于描述配置信息，配置信息下面要写入简单的描述。如下，取自 <a href="https://github.com/fangzhioo/fz-design/blob/master/docs/components/button.md" target="_blank" rel="noreferrer">button.md</a>：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">## 基本使用</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">\`type\` 属性可以配置不同的按钮类型，展示不同的颜色状态</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">## 基本使用</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">\`type\` 属性可以配置不同的按钮类型，展示不同的颜色状态</span></span></code></pre></div><ul><li>并不是组件的所有配置项都要带有演示用例，突出主要即可</li><li>英文名要用反引号包裹，左右两边要带有空格。如： <code>type</code> 配置按钮的类型</li><li>描述信息之后要带有具体的配置例子</li><li>需要提供演效果的代码段，基于 element-plus 文档的 <a href="https://github.com/element-plus/element-plus/blob/dev/docs/.vitepress/config/plugins.ts" target="_blank" rel="noreferrer">实现逻辑</a> ，封装好的 <code>::: demo</code> 语法来展示 demo 和下拉菜单内容，详情配置可参考 <a href="https://github.com/fangzhioo/fz-design/blob/master/docs/.vitepress/plugin/plugin-demo.ts" target="_blank" rel="noreferrer">plugins.ts</a> 。例：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">::: demo</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">xxx/basic</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">:::</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">::: demo</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">xxx/basic</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">:::</span></span></code></pre></div><ul><li>在组件演示完之后，要写详细的 <code>Attributes</code>（必须）、<code>Slots</code>（可选）、<code>Events</code>（可选）描述信息。使用 <code>table</code> 进行编写，格式规范参考如下：</li></ul><p>Attributes</p><div class="vp-table__container"><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>xxx</td><td>xxx</td><td><code>xxx</code></td><td>\`xxx</td></tr></tbody></table></div><p>Slots</p><div class="vp-table__container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>xxx</td><td>xxx</td></tr></tbody></table></div><p>Events</p><div class="vp-table__container"><table><thead><tr><th>事件名称</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>xxx</td><td>xxx</td><td><code>xxx</code></td></tr></tbody></table></div><ul><li>在上面表格中的类型相关内容需要使用反引号包裹，名称列每一项都应该使用 <a href="https://staging-cn.vuejs.org/guide/components/props.html#prop-passing-details" target="_blank" rel="noreferrer">kebab-case</a> 形式。</li><li>表格中需要详细的描述好每个选项。</li></ul><h2 id="🔍-扩展语法" tabindex="-1">🔍 扩展语法 <a class="header-anchor" href="#🔍-扩展语法" aria-label="Permalink to &quot;🔍 扩展语法&quot;">​</a></h2><ul><li>在 <code>*.md</code> 内部可以直接写入 <code>vue</code> 组件代码，完全可以正常解析</li><li>在 <code>*.md</code> 内部可以直接定义和本页面相关的样式，或者 <code>TypeScript</code> 语法，完全可以像下面这样使用：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"># xxx</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">## xxx</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">code....</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;script setup lang=&quot;ts&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">TypeScript code...</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;style scoped&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">css code...</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;style&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"># xxx</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">## xxx</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">code....</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;script setup lang=&quot;ts&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">TypeScript code...</span></span>
<span class="line"><span style="color:#24292e;">&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;style scoped&gt;</span></span>
<span class="line"><span style="color:#24292e;">css code...</span></span>
<span class="line"><span style="color:#24292e;">&lt;style&gt;</span></span></code></pre></div><p>值得注意的是，在 <code>docs/components</code> 目录下 <code>*.md</code> 文件被 <a href="https://github.com/fangzhioo/fz-design/blob/master/docs/.vitepress/plugin/markdown-transform.ts" target="_blank" rel="noreferrer">MarkdownTransform</a> 进行了特殊处理（自动导入demos），所以无法再支持在其中添加 <code>script setup</code> 部分。</p><h2 id="✏️-引入" tabindex="-1">✏️ 引入 <a class="header-anchor" href="#✏️-引入" aria-label="Permalink to &quot;✏️ 引入&quot;">​</a></h2><p>在你新建的组件文档文件之后，你需要在 <a href="https://github.com/fangzhioo/fz-design/blob/master/docs/.vitepress/config/sidebar.ts" target="_blank" rel="noreferrer">sidebar</a> 中引入你的文档，才可以正常显示</p><h2 id="💡-测试" tabindex="-1">💡 测试 <a class="header-anchor" href="#💡-测试" aria-label="Permalink to &quot;💡 测试&quot;">​</a></h2><p>在项目根目录执行命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev:docs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev:docs</span></span></code></pre></div><p>来启动测试文档</p><h2 id="💬-写在最后" tabindex="-1">💬 写在最后 <a class="header-anchor" href="#💬-写在最后" aria-label="Permalink to &quot;💬 写在最后&quot;">​</a></h2><p>规范可能随时会增加或者修改，在编写文档前请认真阅读规范指南。</p>`,33),o=[l];function p(c,r,d,i,h,b){return a(),s("div",null,o)}const y=e(t,[["render",p]]);export{g as __pageData,y as default};
