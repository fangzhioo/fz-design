@use 'sass:map';

@use 'config/mixins' as *;
@use 'config/mixins-var.scss' as *;
@use 'config/common-var.scss' as *;

// Text
$text: () !default;
$text: map.merge(
  (
    'font-size': getCssVar('font-size', 'base'),
    'color': getCssVar('text-color', 'regular')
  ),
  $text
);

$text-font-size: () !default;
$text-font-size: map.merge(
  (
    'large': getCssVar('font-size', 'medium'),
    'default': getCssVar('font-size', 'base'),
    'small': getCssVar('font-size', 'extra-small')
  ),
  $text-font-size
);

@include b(text) {
  @include set-component-css-var('text', $text);

  align-self: center;
  margin: 0;
  padding: 0;
  font-size: getCssVar('text', 'font-size');
  color: getCssVar('text', 'color');
  word-break: break-all;

  @include when(ellipsis) {
    display: inline-block;
    max-width: 100%;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
  }

  @include when(line-clamp) {
    display: -webkit-inline-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  @each $size in (large, default, small) {
    @include m($size) {
      @include set-css-var-value(('text', 'font-size'), map.get($text-font-size, $size));
    }
  }

  @each $type in $types {
    &.#{bem('text', '', $type)} {
      @include css-var-from-global(('text', 'color'), ('color', $type));
    }
  }

  & > .#{bem('svg-icon')} {
    vertical-align: -2px;
  }
}
